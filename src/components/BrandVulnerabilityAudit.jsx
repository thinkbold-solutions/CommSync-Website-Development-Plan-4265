import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { AlertTriangle, CheckCircle, Shield, TrendingDown, Download, Calendar } from 'lucide-react';

const BrandVulnerabilityAudit = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState({});
  const [showResults, setShowResults] = useState(false);
  const [showLeadCapture, setShowLeadCapture] = useState(false);
  const [leadData, setLeadData] = useState({ name: '', email: '', company: '', role: '' });

  const questions = [
    {
      id: 'reputation_monitoring',
      question: 'How do you currently monitor your brand reputation online?',
      options: [
        { value: 'professional', text: 'Professional monitoring tools with alerts', score: 3 },
        { value: 'basic', text: 'Basic Google alerts and manual checking', score: 2 },
        { value: 'social', text: 'Only social media monitoring', score: 1 },
        { value: 'none', text: 'No systematic monitoring', score: 0 }
      ]
    },
    {
      id: 'crisis_plan',
      question: 'Does your organization have a documented brand crisis response plan?',
      options: [
        { value: 'comprehensive', text: 'Yes, comprehensive and regularly tested', score: 3 },
        { value: 'basic', text: 'Basic plan that needs updating', score: 2 },
        { value: 'informal', text: 'Informal guidelines only', score: 1 },
        { value: 'none', text: 'No formal plan exists', score: 0 }
      ]
    },
    {
      id: 'stakeholder_communication',
      question: 'How prepared are you to communicate with key stakeholders during a brand crisis?',
      options: [
        { value: 'very_prepared', text: 'Very prepared with pre-approved messages', score: 3 },
        { value: 'somewhat', text: 'Somewhat prepared with general guidelines', score: 2 },
        { value: 'limited', text: 'Limited preparation', score: 1 },
        { value: 'unprepared', text: 'Not prepared at all', score: 0 }
      ]
    },
    {
      id: 'brand_messaging',
      question: 'How consistent is your brand messaging across all channels?',
      options: [
        { value: 'very_consistent', text: 'Very consistent with strict guidelines', score: 3 },
        { value: 'mostly', text: 'Mostly consistent with some variations', score: 2 },
        { value: 'inconsistent', text: 'Often inconsistent across channels', score: 1 },
        { value: 'no_guidelines', text: 'No formal messaging guidelines', score: 0 }
      ]
    },
    {
      id: 'response_speed',
      question: 'How quickly can your team respond to brand threats or negative publicity?',
      options: [
        { value: 'immediate', text: 'Within 1 hour with dedicated team', score: 3 },
        { value: 'fast', text: 'Within 4 hours during business days', score: 2 },
        { value: 'slow', text: 'Within 24-48 hours', score: 1 },
        { value: 'very_slow', text: 'Several days or longer', score: 0 }
      ]
    }
  ];

  const handleAnswer = (questionId, answer) => {
    setAnswers({ ...answers, [questionId]: answer });
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowLeadCapture(true);
    }
  };

  const calculateScore = () => {
    return Object.values(answers).reduce((total, answer) => total + answer.score, 0);
  };

  const getVulnerabilityLevel = (score) => {
    if (score >= 12) return 'fortified';
    if (score >= 8) return 'moderate';
    return 'high';
  };

  const getResultData = (level) => {
    const results = {
      high: {
        title: 'High Vulnerability',
        color: 'text-red-600',
        bgColor: 'bg-red-50',
        icon: AlertTriangle,
        description: 'Your brand faces significant risks. Immediate action is needed to protect your reputation and market position.',
        riskFactors: [
          'Vulnerable to reputation attacks',
          'Slow crisis response capability',
          'Inconsistent brand messaging',
          'Limited stakeholder communication readiness'
        ],
        urgency: 'URGENT: Schedule immediate consultation'
      },
      moderate: {
        title: 'Moderate Vulnerability',
        color: 'text-yellow-600',
        bgColor: 'bg-yellow-50',
        icon: Shield,
        description: 'Your brand has some protection but gaps remain. Strengthening your defenses will prevent future crises.',
        riskFactors: [
          'Some monitoring gaps exist',
          'Crisis plan needs enhancement',
          'Response times could improve',
          'Messaging consistency varies'
        ],
        urgency: 'RECOMMENDED: Schedule consultation this month'
      },
      fortified: {
        title: 'Well Fortified',
        color: 'text-green-600',
        bgColor: 'bg-green-50',
        icon: CheckCircle,
        description: 'Excellent brand protection! You have strong foundations but can always optimize your approach.',
        riskFactors: [
          'Strong monitoring systems',
          'Solid crisis response plan',
          'Good stakeholder communication',
          'Consistent brand messaging'
        ],
        urgency: 'OPTIMIZE: Schedule strategic review'
      }
    };
    return results[level];
  };

  const handleLeadSubmit = (e) => {
    e.preventDefault();
    // Here you would normally send the lead data to your API
    console.log('Brand Audit Lead captured:', leadData);
    setShowResults(true);
  };

  const resetAudit = () => {
    setCurrentQuestion(0);
    setAnswers({});
    setShowResults(false);
    setShowLeadCapture(false);
    setLeadData({ name: '', email: '', company: '', role: '' });
  };

  if (showResults) {
    const score = calculateScore();
    const level = getVulnerabilityLevel(score);
    const resultData = getResultData(level);

    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="max-w-3xl mx-auto bg-white rounded-lg shadow-xl p-8 card-enhanced"
      >
        <div className={`text-center mb-8 p-6 rounded-lg ${resultData.bgColor}`}>
          <resultData.icon className={`w-16 h-16 mx-auto mb-4 ${resultData.color}`} />
          <h3 className={`text-2xl font-montserrat font-bold mb-2 ${resultData.color}`}>
            Brand Vulnerability Level: {resultData.title}
          </h3>
          <p className="text-gray-700 text-lg">
            Score: {score}/15
          </p>
        </div>

        <div className="mb-8">
          <p className="text-gray-700 mb-6 text-lg leading-relaxed">
            {resultData.description}
          </p>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div>
              <h4 className="font-montserrat font-bold text-primary-charcoal mb-4">
                Risk Assessment:
              </h4>
              <ul className="space-y-2">
                {resultData.riskFactors.map((factor, index) => (
                  <li key={index} className="flex items-start space-x-2">
                    <TrendingDown className={`w-5 h-5 mt-0.5 flex-shrink-0 ${resultData.color}`} />
                    <span className="text-gray-700">{factor}</span>
                  </li>
                ))}
              </ul>
            </div>
            
            <div className={`p-4 rounded-lg ${resultData.bgColor} border-l-4 ${level === 'high' ? 'border-red-500' : level === 'moderate' ? 'border-yellow-500' : 'border-green-500'}`}>
              <h4 className="font-montserrat font-bold text-primary-charcoal mb-2">
                Immediate Action:
              </h4>
              <p className={`font-semibold ${resultData.color} mb-4`}>
                {resultData.urgency}
              </p>
              <div className="space-y-3">
                <button className="w-full btn-primary hover-glow flex items-center justify-center">
                  <Calendar className="w-5 h-5 mr-2" />
                  Book Free Strategy Session
                </button>
                <button className="w-full bg-gray-600 text-white py-2 rounded-lg hover:bg-gray-700 transition-colors flex items-center justify-center">
                  <Download className="w-5 h-5 mr-2" />
                  Get 30-Day Fortification Checklist
                </button>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-gray-50 rounded-lg p-6 text-center">
          <h4 className="font-montserrat font-bold text-primary-charcoal mb-3">
            Want a Detailed Brand Vulnerability Report?
          </h4>
          <p className="text-gray-600 mb-4">
            Get a comprehensive 15-page analysis with specific recommendations for your industry.
          </p>
          <div className="flex flex-col sm:flex-row gap-3 justify-center">
            <button className="btn-primary hover-glow">
              Get Full Report ($297 Value - FREE)
            </button>
            <button onClick={resetAudit} className="btn-secondary hover-glow">
              Retake Assessment
            </button>
          </div>
        </div>
      </motion.div>
    );
  }

  if (showLeadCapture) {
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="max-w-md mx-auto bg-white rounded-lg shadow-xl p-8 card-enhanced"
      >
        <div className="text-center mb-6">
          <Shield className="w-16 h-16 mx-auto mb-4 text-primary-red" />
          <h3 className="text-2xl font-montserrat font-bold text-primary-charcoal mb-2">
            Get Your Brand Vulnerability Results
          </h3>
          <p className="text-gray-600">
            Enter your details to receive your personalized brand assessment and exclusive recommendations.
          </p>
        </div>

        <form onSubmit={handleLeadSubmit} className="space-y-4">
          <div>
            <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
              Full Name *
            </label>
            <input
              type="text"
              id="name"
              required
              value={leadData.name}
              onChange={(e) => setLeadData({ ...leadData, name: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-red"
            />
          </div>
          
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
              Business Email *
            </label>
            <input
              type="email"
              id="email"
              required
              value={leadData.email}
              onChange={(e) => setLeadData({ ...leadData, email: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-red"
            />
          </div>
          
          <div>
            <label htmlFor="company" className="block text-sm font-medium text-gray-700 mb-1">
              Company Name *
            </label>
            <input
              type="text"
              id="company"
              required
              value={leadData.company}
              onChange={(e) => setLeadData({ ...leadData, company: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-red"
            />
          </div>
          
          <div>
            <label htmlFor="role" className="block text-sm font-medium text-gray-700 mb-1">
              Your Role
            </label>
            <select
              id="role"
              value={leadData.role}
              onChange={(e) => setLeadData({ ...leadData, role: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-red"
            >
              <option value="">Select your role</option>
              <option value="ceo">CEO/President</option>
              <option value="cmo">CMO/Marketing Director</option>
              <option value="communications">Communications Director</option>
              <option value="pr">PR Manager</option>
              <option value="other">Other</option>
            </select>
          </div>

          <button type="submit" className="w-full btn-primary hover-glow">
            Get My Brand Vulnerability Report
          </button>
          
          <p className="text-xs text-gray-500 text-center">
            We respect your privacy. Unsubscribe anytime.
          </p>
        </form>
      </motion.div>
    );
  }

  const question = questions[currentQuestion];

  return (
    <section className="py-20 bg-gray-50">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-12">
          <h2 className="text-4xl sm:text-5xl font-montserrat font-bold text-primary-charcoal mb-4">
            Brand <span className="gradient-text">Vulnerability Audit</span>
          </h2>
          <p className="text-xl text-gray-600 mb-6">
            Discover your brand's hidden vulnerabilities in 2 minutes
          </p>
          <div className="flex items-center justify-center space-x-4 text-sm text-gray-500">
            <span>✓ Used by 500+ companies</span>
            <span>✓ Results in 2 minutes</span>
            <span>✓ Free detailed report</span>
          </div>
        </div>

        <div className="max-w-2xl mx-auto">
          {/* Progress Bar */}
          <div className="mb-8">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm text-gray-600">Question {currentQuestion + 1} of {questions.length}</span>
              <span className="text-sm text-gray-600">{Math.round(((currentQuestion + 1) / questions.length) * 100)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-primary-red h-2 rounded-full transition-all duration-300"
                style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
              ></div>
            </div>
          </div>

          {/* Question */}
          <AnimatePresence mode="wait">
            <motion.div
              key={currentQuestion}
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -50 }}
              transition={{ duration: 0.3 }}
              className="bg-white rounded-lg shadow-lg p-8 card-enhanced"
            >
              <h3 className="text-2xl font-montserrat font-bold text-primary-charcoal mb-6">
                {question.question}
              </h3>
              <div className="space-y-3">
                {question.options.map((option, index) => (
                  <button
                    key={index}
                    onClick={() => handleAnswer(question.id, option)}
                    className="w-full text-left p-4 border border-gray-200 rounded-lg hover:border-primary-red hover:bg-red-50 transition-colors hover-glow"
                  >
                    <span className="text-gray-700">{option.text}</span>
                  </button>
                ))}
              </div>
            </motion.div>
          </AnimatePresence>
        </div>
      </div>
    </section>
  );
};

export default BrandVulnerabilityAudit;